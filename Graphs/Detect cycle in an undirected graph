//Initial Template for Java

import java.util.*;
import java.io.*;
import java.lang.*;

class DriverClass
{
    public static void main (String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t-- > 0)
        {
            ArrayList<ArrayList<Integer>> list = new ArrayList<>();
            int nov = sc.nextInt();
            int edg = sc.nextInt();
            
            for(int i = 0; i < nov+1; i++)
                list.add(i, new ArrayList<Integer>());
                
            for(int i = 1; i <= edg; i++)
            {
                int u = sc.nextInt();
                int v = sc.nextInt();
                list.get(u).add(v);
                list.get(v).add(u);
            }
            if(new DetectCycle().isCyclic(list, nov) == true)
                System.out.println("1");
            else System.out.println("0");
        }
    }
}// } Driver Code Ends


//User function Template for Java

/*
ArrayList<ArrayList<Integer>> g: represent graph containing 'V' number of
                                    vertices and edges between them
V: represent number of vertices
*/
class DetectCycle
{
    static boolean isCyclic(ArrayList<ArrayList<Integer>> list, int V)
    {
        boolean visited[] = new boolean[V];
        for(int i = 0; i < V; i++)
            visited[i] = false;
        for(int u = 0; u < V; u++)
            if(!visited[u])
                if(isCyclicUtil(u, list, visited, -1))
                    return true;
        return false;
    }
    
    static boolean isCyclicUtil(int v, ArrayList<ArrayList<Integer>> list, boolean visited[], int parent)
    {
        visited[v] = true;
        int i;
        Iterator<Integer> itr = list.get(v).iterator();
        while(itr.hasNext())
        {
            i = itr.next();
            if(!visited[i])
            {
                if(isCyclicUtil(i, list, visited, v))
                    return true;
            }else if(i != parent)
                    return true;            
            
        }
        return false;
    }
}
